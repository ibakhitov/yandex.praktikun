1. Анализ данных начинается здесь
Мы начнём курс с изучения языка Python — основного инструмента аналитика данных.
Чему вы научитесь
В этой теме вы познакомитесь с основами Python: узнаете, как выводить текст на экран, создавать переменные и выполнять с ними математические операции. Это будет не теоретический рассказ. Прямо по ходу обучения вы будете анализировать реальные данные, и в конце представите небольшой отчёт об исследовании.
Сколько времени это займёт
2,5 часа: 19 уроков примерно по 8 минут.
Постановка задачи
На китайском языке говорят больше миллиарда человек, но много ли сайтов на нём написано? А на русском? Чтобы узнать ответы на эти вопросы, мы рассмотрим данные о распространённости языков в мире и в интернете.

########################################################################################################################
2. Первая программа
Анализ информации начинается с вывода на экран. Ведь нельзя анализировать то, чего не видишь. В Python это очень просто, давайте попробуем.
Напечатайте в окне «Код» следующий текст:
print('Ура!')
Нажмите на кнопку ▶︎ («Выполнить код»).
В окне «Результат» должно появиться сообщение
Ура!
Нажмите на кнопку «Проверить».

# 2. Первая программа

"""
Задание
Анализ информации начинается с вывода на экран. В Python это очень просто, давайте попробуем
   Напечатайте в окне «Код» следующий текст:
      print('Ура!')
"""


# Solution:

print('Ура!')



########################################################################################################################
3. Функция print()
Функции в Python — это ваши инструменты и верные помощники. Надо знать их имена, чтобы вызвать, когда они понадобятся.
Например, за вывод на экран отвечает команда print():
print('Прочти и запомни')
Прочти и запомни
print() — это функция, то есть встроенная в Python программа для определённого действия. Назначение функции print() — вывод на экран (или «печать на экране» на жаргоне программистов). После названия функции в скобках перечисляются её аргументы, или параметры, — данные, с которыми функция должна что-то сделать. Говорят, что аргументы передаются, а функция их принимает. Когда мы пишем имя функции с аргументами, мы её вызываем. Само использование функции называют словом вызов. В нашем примере аргумент — это текст «Прочти и запомни». Обратите внимание, что в Python текст нужно помещать в кавычки, а на экран он выводится без них.

# 3. Функция print()

"""
Задача
Вызовите функцию print() со следующим аргументом:
'Исследование распространённости языков.'
"""

# Solution:

print('Исследование распространённости языков.')

########################################################################################################################
4. Операции с числами
Текст, который вы только что написали, — это исходный код программы. Его часто называют просто «программа» или «код». Это набор инструкций. Компьютер выполняет их, если программа написана на понятном ему языке. Например, на Python.
В нашем тренажёре программа запускается, когда вы нажимаете кнопку «Выполнить код».
image
Заголовок исследования есть, теперь пора считать. Python умеет оперировать числами как обычный калькулятор. Например, посчитаем, сколько человек выучили английский как иностранный. Всего на английском говорят 1121 млн человек, среди них — 378.2 млн носителей. Получаем:
print(1121 - 378.2)
742.8
Смотрите, почти 743 миллиона человек выучили английский. Это может вдохновить тех, кому язык никак не даётся.
Обратите внимание, что в Python разделитель десятичной дроби — не запятая, а точка.
В этой программе минус — не простой знак, а команда языка программирования, или оператор. Python знает и другие операторы, кроме вычитания:
В МАТЕМАТИКЕ	В PYTHON
Сложение	+
Вычитание	-
Умножение	*
Деление	/
Арифметические операторы принято отделять пробелами: такой код легче читать.
Хорошо:
print(153.9 + 39.6 + 10.4)
Плохо:
print(153.9+39.6+10.4)
Арифметические операции Python выполняет в порядке, привычном с начальной школы. Сначала выполняются умножение и деление (слева направо), а потом — сложение и вычитание (тоже слева направо). Искусственно поменять порядок операций можно скобками:
print(2 + 5 * 4 / 2 - 8 + 3 * (3 + 2))
19.0
Вот как этот пример выполнялся:
2 + 5 * 4 / 2 - 8 + 3 * (3 + 2)
2 + 5 * 4 / 2 - 8 + 3 * 5
2 + 20 / 2 - 8 + 3 * 5
2 + 10 - 8 + 3 * 5
2 + 10 - 8 + 15
12 - 8 + 15
4 + 15
19

# 4. Операции с числами

"""
Задание
Python умеет оперировать числами как обычный калькулятор. Для анализа мы взяли список языков, на которых написано не
менее 100 тысяч сайтов из 10 миллионов самых посещаемых в интернете. Давайте посчитаем суммарное количество
носителей всех славянских языков из выбранных: русского, польского и чешского языков в миллионах:
Язык	Носители языка, млн
Английский	378.2
Русский	153.9
Немецкий	76.0
Испанский	442.3
Французский	76.7
Японский	128.2
Португальский	222.7
Итальянский	64.8
Персидский	60.0
Польский	39.6
Китайский	908.7
Датский	22.0
Турецкий	78.5
Чешский	10.4
Источник: Ethnologue (издание 2018 года
Напишите на Python программу, которая печатает на экране суммарное количество носителей романских языков: испанского,
французского, португальского и итальянского языков в миллионах. Значения из таблицы внесите в код вручную
"""

# Solution:

print(442.3 + 76.7 + 222.7 + 64.8)

########################################################################################################################
5. Знакомство с данными
Получив данные, аналитик не сразу бросается что-нибудь делать. Для начала он смотрит на таблицу, соображая, что это такое. Эта созерцательная часть необходима. Научитесь получать от неё удовольствие.
В таблице приведено количество владеющих разными языками и доли сайтов на каждом языке среди 10 миллионов самых популярных веб-ресурсов.
ЯЗЫК	ДОЛЯ САЙТОВ В ТОП-10 МЛН	НОСИТЕЛИ ЯЗЫКА, МЛН ЧЕЛ.	ВСЕ ВЛАДЕЮЩИЕ ЯЗЫКОМ, МЛН ЧЕЛ.
Английский	0.539	378.2	1121.0
Русский	0.061	153.9	264.3
Немецкий	0.060	76.0	132.0
Испанский	0.049	442.3	512.9
Французский	0.040	76.7	284.9
Японский	0.034	128.2	128.3
Португальский	0.029	222.7	236.5
Итальянский	0.024	64.8	67.8
Персидский	0.020	60.0	110.0
Польский	0.018	39.6	40.3
Китайский	0.017	908.7	1107.0
Датский	0.012	22.0	28.0
Турецкий	0.012	78.5	78.9
Чешский	0.010	10.4	10.6
Источники: Ethnologue (издание 2018 года), Web Technology Surveys (данные на конец 2018).
Языки упорядочены по доле сайтов в интернете. Посмотрите на данные — замечаете ли вы что-нибудь необычное?

# 5. Умножение, деление, вычитание

"""
Задание
Аналитик может получить неожиданный результат даже расчётом на калькуляторе. Сравним, к примеру, распространённость
языков на Земле с их местом в интернете. Специально для вас мы подготовили сравнение количества владеющих языком
и доли сайтов на этом языке среди 10 миллионов самых популярных сайтов в интернете вообще
Язык	Доля сайтов в топ-10 млн	Носители языка, млн чел.	Все владеющие языком, млн чел.
Английский	0.539	378.2	1121.0
Русский	0.061	153.9	264.3
Немецкий	0.060	76.0	132.0
Испанский	0.049	442.3	512.9
Французский	0.040	76.7	284.9
Японский	0.034	128.2	128.3
Португальский	0.029	222.7	236.5
Итальянский	0.024	64.8	67.8
Персидский	0.020	60.0	110.0
Польский	0.018	39.6	40.3
Китайский	0.017	908.7	1107.0
Датский	0.012	22.0	28.0
Турецкий	0.012	78.5	78.9
Чешский	0.010	10.4	10.6
Вычислите, сколько людей выучили русский язык как иностранный (в миллионах). Напечатайте результат на экране
"""

# Solution:

print(264.3 - 153.9)

########################################################################################################################
6. Расчёты с данными
В профессиональной жизни знакомство с таблицей начинается с сомнений. Все ли цифры на месте? Нет ли явных ошибок? Не перепутал ли чего-нибудь разработчик, который вам это дал? В этом уроке таблица исходных данных проверена. Вы можете сразу окунуться в расчёты.
За что цепляется здесь взгляд? Не самые распространённые языки — русский и немецкий — занимают высокие позиции по количеству сайтов. Очевидно, в России и Германии не только пользуются зарубежными интернет-сервисами, но и создают свои. А что с языками во вкладке languages_rus.csv?

# 6. Порядок операций


"""
Задание
Теперь используем скобки, чтобы посчитать долю выучивших английский язык как иностранный среди всех, кто на нём
говорит:
Язык	Доля сайтов в топ-10 млн	Носители языка, млн	Все владеющие языком, млн
Английский	0.539	378.2	1121.0
Русский	0.061	153.9	264.3
Немецкий	0.060	76.0	132.0
Испанский	0.049	442.3	512.9
Французский	0.040	76.7	284.9
Японский	0.034	128.2	128.3
Португальский	0.029	222.7	236.5
Итальянский	0.024	64.8	67.8
Персидский	0.020	60.0	110.0
Польский	0.018	39.6	40.3
Китайский	0.017	908.7	1107.0
Датский	0.012	22.0	28.0
Турецкий	0.012	78.5	78.9
Чешский	0.010	10.4	10.6
print((1121 - 378.2) / 1121) // 0.6626226583407672
Посчитайте, какую долю среди владеющих японским языком составляют те, кто выучил его как иностранный. Напечатайте
результат на экране
"""

# Solution:

print((128.3 - 128.2) / 128.3)

########################################################################################################################

7. Комментарии
Чтобы пояснить для себя и других смысл кода, его снабжают комментариями. Их можно писать на любом языке, обозначив для Python, что это такое.
В Python комментарий начинается с символа # (решётка):
# число сайтов с китайским языком среди 10 миллионов самых популярных сайтов
print(0.017 * 10000000)
170000.0
После решётки и до конца строки можно писать всё что угодно — Python это проигнорирует. Можно превратить в комментарий строчку кода, которую стирать не стоит, а выполнять не нужно. Программисты называют этот приём словом «закомментировать».
Каждая строчка кода на Python оканчивается там, где вы сделали перенос строки (нажали Enter).
Чтобы сделать комментарий из нескольких строк, нужно в начале каждой ставить «решётку».

# 7. Комментарии

"""
Задание
Выполните описанные в комментарии вычисления и напечатайте результат на экране
"""

"""
Посчитайте, во сколько раз число носителей китайского языка больше
числа носителей английского. Напечатайте результат на экране
"""

# Solution:

print(908.7 / 378.2) # напишите код вместо многоточия

########################################################################################################################
8. Перерыв
Отлично справляетесь! Вы не устали? Если нужно, сделайте перерыв.
Вы узнали, что такое Python, программа, исходный код, комментарии и операторы, и научились выводить данные на экран функцией print().
Если взялись за программирование впервые, может быть трудно и непонятно. Связать новые знания в систему поможет концепт-карта. Так называют визуализацию изученных сущностей и их связей друг с другом.
Обычно на такой карте три вида элементов:
Концепты (понятия), оформленные в кружки или прямоугольники;
Связи между ними, показанные стрелками;
Характеристики этих связей над стрелками.
Вот концепт-карта по первым семи урокам:

Вы можете скачать её, чтобы изучить подробнее. Она поможет быстро вспомнить, что делает функция, какие у неё аргументы и синтаксис. Со временем карта будет расти.
########################################################################################################################
9. Переменные
Настоящий код — это программа, способная сохранять результаты промежуточных вычислений. Для этого нам понадобятся переменные.
Когда вы первый раз записываете имя переменной, это называется объявить переменную. В Python переменную всегда объявляют, присваивая ей какое-нибудь значение. Достаточно просто ввести имя, поставить знак равенства (он называется оператор присваивания) и написать нужное значение.
english = 378.2
Если дальше в программе написать переменную, то вместо имени подставится её значение:
print(english)
378.2
image
Переменные можно представить как надписанные коробочки, в которые мы кладём значения, чтобы потом их доставать, смотреть и заменять другими.
image
 
Имена переменных записывайте только латиницей: иероглифы и кириллические символы могут привести к ошибкам. Например, они создают путаницу: английская "С" и русская «С» выглядят одинаково.
Если название состоит из нескольких слов, разделяйте их подчёркиванием: english_native. Python допускает использование цифр в именах переменных, но не на первой позиции.
Используем возможности переменных. Посчитаем, во сколько раз людей, выучивших английский как иностранный, больше тех, кто выучил русский.

# 9. Переменные

"""
Задание
Язык	Доля сайтов в топ-10 млн	Носители языка, млн	Все владеющие языком, млн
Английский	0.539	378.2	1121.0
Русский	0.061	153.9	264.3
Немецкий	0.060	76.0	132.0
Испанский	0.049	442.3	512.9
Французский	0.040	76.7	284.9
Японский	0.034	128.2	128.3
Португальский	0.029	222.7	236.5
Итальянский	0.024	64.8	67.8
Персидский	0.020	60.0	110.0
Польский	0.018	39.6	40.3
Китайский	0.017	908.7	1107.0
Датский	0.012	22.0	28.0
Турецкий	0.012	78.5	78.9
Чешский	0.010	10.4	10.6
Давайте выясним, кого больше — носителей китайского языка или вместе взятых носителей трёх самых популярных в
интернете языков. Объявите переменную top3_total и запишите в неё суммарное количество носителей английского,
русского и немецкого языков. Вычтите полученное значение из количества носителей китайского языка и выведите
результат на экран. Используйте переменные из прошлой задачи
"""

# Solution:

english = 378.2
russian = 153.9
german = 76.0
chinese = 908.7
# < напишите код здесь >
top3_total = english + russian + german
print(chinese - top3_total)

########################################################################################################################
10. Использование переменных
Чтобы код был понятен для вас и других разработчиков, придерживайтесь правил именования переменных:
По имени переменной должно быть ясно, что в ней хранится. Избегайте имён вроде a и b: в таких переменных легко запутаться.
Используйте английские слова: так вам будет проще входить в международные проекты.
Например, переменную для хранения количества носителей английского языка можно назвать не english, а english_native.
Значения в таблице могут меняться: например, вам понадобится подставить данные за другие годы. Тогда и пригодятся понятные имена переменных.
Вычислим, во сколько раз англоязычных сайтов больше, чем русскоязычных:
english = 0.539
russian = 0.061
print(english / russian)
8.836065573770492
В этом примере мы анализируем данные за 2018 год. Если нужно узнать положение на 2013-й, мы можем просто подставить новые значения переменных.
Доля англоязычных сайтов на 2013 год: 0.549
Доля русскоязычных сайтов на 2013 год: 0.055
english = 0.549
russian = 0.055
print(english / russian)
9.981818181818182
Как видите, доля сайтов с русским языком за 5 лет выросла.

# 10. Использование переменных

"""
Задание
 Язык	Доля сайтов в топ-10 млн	Носители языка, млн	Все владеющие языком, млн
Английский	0.539	378.2	1121.0
Русский	0.061	153.9	264.3
Немецкий	0.060	76.0	132.0
Испанский	0.049	442.3	512.9
Французский	0.040	76.7	284.9
Японский	0.034	128.2	128.3
Португальский	0.029	222.7	236.5
Итальянский	0.024	64.8	67.8
Персидский	0.020	60.0	110.0
Польский	0.018	39.6	40.3
Китайский	0.017	908.7	1107.0
Датский	0.012	22.0	28.0
Турецкий	0.012	78.5	78.9
Чешский	0.010	10.4	10.6
В этом примере мы анализируем данные за 2018 год. Если нужно узнать положение на 2013-й, мы можем просто подставить
новые значения переменных
    Доля англоязычных сайтов на 2013 год: 0.549
    Доля русскоязычных сайтов на 2013 год: 0.055
english = 0.549
russian = 0.055
print(english / russian) // 9.981818181818182
Как видите, доля сайтов с русским языком за 5 лет выросла
Программа делит друг на друга доли сайтов на японском и на китайском языках в 2018 году. Подставьте в те же переменные
значения на 2013 год (см. ниже)
    Доля сайтов на японском языке за 2013 год: 0.045
    Доля сайтов на китайском языке за 2013 год: 0.043
"""

# Solution:

japanese = 0.045
chinese = 0.043
print(chinese / japanese)

########################################################################################################################
11. Типы данных
Любое значение, с которым мы работаем, относится к определённому типу данных. Например, целое число. В Python такой тип данных называется int.
Вот в переменную english сохраняется значение типа int:
english = 378200000
Чтобы узнать тип данных, вызывают функцию type() и передают ей имя переменной как аргумент: type(english). Результат работы функции можно печатать на экране:
print(type(english))
<class 'int'>
Результатом работы функции type() стало сообщение <class 'int'>, что значит: «переданный мне аргумент имеет тип данных int». В таких случаях говорят: «Функция type() вернула значение <class 'int'>».
Дробные числа имеют другой тип данных — float. Это название произошло от английского floating point, «плавающая точка» (подробнее см. ниже).
german_web_percent = 6
print(type(german_web_percent))
german_web_percent_2 = 6.0
print(type(german_web_percent_2))
<class 'int'>
<class 'float'>
Что значит «плавающая точка»
«Плавающая точка», или «плавающая запятая», разделяет целую и дробную часть числа. Она «плавает», смещаясь вправо-влево в зависимости от показателя степени числа 10, когда дробь представляют как произведение:
36.6 = 0.366 * 100 = 0.00366 * 10000.

# 11. Типы данных

"""
Задание
Мы добавили переменные в программу, которая вычисляла количество русскоязычных сайтов, вошедших в 10 миллионов самых
популярных. Давайте посмотрим на полученный код. Если переменная russian_web_part имеет тип float, а переменная
web_popular имеет тип int, какой тип должен быть у переменной russian_web_popular?
Напечатайте на отдельных строках:
    Значение переменной.
    Тип переменной (вызовом функции type())
"""

# Solution:

russian_web_part = 0.061
web_popular = 10000000

russian_web_popular = russian_web_part * web_popular
print(russian_web_popular)
print(type(russian_web_popular))

########################################################################################################################
12. Преобразования типов
Вы обнаружили интересное поведение переменных: при перемножении значений с типами int и float получается значение типа float, даже если результат должен быть целым (как количество сайтов в нашем примере).
russian_web_part = 0.061
web_popular = 10000000

russian_web_popular = russian_web_part * web_popular

print(russian_web_popular)
print(type(russian_web_popular))
610000.0
<class 'float'>
Python не умеет понимать смысл написанного кода и не может определить, должен ли результат быть целым или дробным. Поэтому — на всякий случай — результат операций между типами int и float имеет тип float. Так ни одна цифра не потеряется.
Если тип float не устраивает, можем сделать преобразование типа и превратить наше целое число с типом float в целое число типа int. Для этого вызывается функция int():
russian_web_part = 0.061
web_popular = 10000000

russian_web_popular = russian_web_part * web_popular

russian_web_popular_2 = int(russian_web_popular)

print(russian_web_popular_2)
print(type(russian_web_popular_2))
610000
<class 'int'>
Обратите внимание, что когда тип float преобразуется в тип int, происходит округление вниз, то есть знаки после точки отбрасываются:
english_web_percent = 53.9
print(english_web_percent)
print(type(english_web_percent))

english_web_percent_2 = int(english_web_percent)
print(english_web_percent_2)
print(type(english_web_percent_2))
53.9
<class 'float'>
53
<class 'int'>
Можно делать и обратное преобразование из int во float вызовом функции float():
english_native = 378200000
print(english_native)
print(type(english_native))

english_native_2 = float(378200000)
print(english_native_2)
print(type(english_native_2))
378200000
<class 'int'>
378200000.0
<class 'float'>
Чтобы не запутаться в типах данных и функциях преобразования, скачайте и посмотрите обновлённую концепт-карту. В ней собраны все понятия, функции и связи между ними, начиная с первого урока.

# 12. Преобразования типов

"""
Задание
Мы написали код, преобразующий количество носителей русского языка в млн (переменная russian_native_millions) в
количество носителей русского языка в чел. (переменная russian_native). Вторая переменная преобразована к типу int,
так как в ней лежит количество человек. Вызов функции int() организован неудачно: теряется 900 тыс. человек. Измените
код так, чтобы в переменной russian_native оказалось значение типа int, и никто не потерялся
"""

# Solution:

russian_native_millions = 153.9
russian_native = int(russian_native_millions * 1000000)
print(russian_native)

########################################################################################################################
13. Ошибки
Ошибки — это нормально. С ними сталкиваются все разработчики. Поэтому важно научиться понимать, в чём ошибка, и её исправлять.
Попробуем выполнить такую программу:
russian_speakers = 264.3
print(russian_spekers)
Traceback (most recent call last):
 File "main.py", line 2, in <module>
   print(russian_spekers)
NameError: name 'russian_spekers' is not defined
Мы допустили опечатку во второй строке. Python споткнулся о неизвестное имя переменной и выдал сообщение об ошибке. Он привёл подробности:
в какой строке обнаружена ошибка (line 2, от. англ. line, «строка»);
тип ошибки: NameError (неизвестное имя переменной);
из-за чего произошла ошибка: name 'russian_spekers' is not defined (никаких сущностей с именем russian_spekers ещё не объявлялось).
Чтобы программа заработала, поправим опечатку:
russian_speakers = 264.3
print(russian_speakers)
264.3
Разберём ещё несколько распространённых ошибок.
Например, при сложении забыли написать одно слагаемое. Получаем синтаксическую ошибку — сообщение ''SyntaxError'':
print(3 + )
File "main.py", line 1
   print(3 + )
             ^
SyntaxError: invalid syntax
Сообщение invalid syntax переводится как «недопустимый синтаксис». Ещё ошибку такого рода можно получить, если забыть скобку или кавычку:
print(3 + 5
File "main.py", line 2
   
              ^
SyntaxError: unexpected EOF while parsing
EOF — сокращение для end of file (англ. «конец файла»), а всё сообщение "unexpected EOF while parsing" переводится как «неожиданный конец файла во время разбора кода программы». Python увидел начало вызова функции, но внезапно код программы закончился.
print('Привет!)
File "main.py", line 1
   print('Привет!)
                  ^
SyntaxError: EOL while scanning string literal
EOL — сокращение для end of line (англ. «конец строки»), а всё сообщение "EOL while scanning string literal" переводится как «конец строки во время чтения её текста». Python увидел открывающую кавычку, но строка закончилась, а закрывающей кавычки не было.
########################################################################################################################
14. Языки в офлайне и в онлайне
Если величин в исходной таблице несколько, сохраните каждую в переменной с «говорящим» именем. Так все расчёты в программе будет легко понять и проверить.
Соберём полученные знания и сравним использование языков в офлайне и в интернете. Нам интересны три языка: китайский, английский и русский. Для каждого посчитаем долю говорящих на нём и долю написанных на нём сайтов. Потом вычислим «индекс проникновения в интернет» — поделим количество популярных сайтов с этим языком на количество людей, говорящих на нём.
Результаты программа напечатает в таком формате:
--- Китайский язык ---
Доля говорящих на языке: ...%
Доля сайтов с языком: ...%
Индекс проникновения в интернет: ...

--- Английский язык ---
Доля говорящих на языке: ...%
Доля сайтов с языком: ...%
Индекс проникновения в интернет: ...

--- Русский язык ---
Доля говорящих на языке: ...%
Доля сайтов с языком: ...%
Индекс проникновения в интернет: ...

# 14. Языки в оффлайне и в онлайне

"""
Задание
Задача
Сначала занесем все необходимые величины из таблицы в переменные. Для удобства все вычисления будем производить в
миллионах. Объявите следующие переменные:
    chinese_speakers для количества людей, говорящих на китайском языке;
    chinese_web_part для доли сайтов с китайским языком;
    и по аналогии – переменные english_speakers, english_web_part, russian_speakers, russian_web_part.
Население планеты и число сайтов мы уже заполнили
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107.0# < напишите код здесь >
chinese_web_part = 0.017# < напишите код здесь >

english_speakers = 1121.0
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

########################################################################################################################
15. Печать на одной строке
Вы умеете выводить на экран текст или числа. А вот как напечатать их все в одной строке?
Для этого нужно в скобках функции print() перечислить через запятую то, что мы хотим напечатать:
chinese_speakers = 1107
print('Число людей, говорящих на китайском (млн):', chinese_speakers)
Число людей, говорящих на китайском (млн): 1107
print() напечатает все переданные ей аргументы через пробел.
Через запятую можно перечислять сколько угодно частей сообщения — количество аргументов функции print() не ограничено:
chinese_speakers = 1107
print('На китайском говорит', chinese_speakers, 'млн человек.')
На китайском говорит 1107 млн человек.

# 15. Печать на одной строке

"""
Задание
Вычислите долю людей, говорящих на китайском языке. Присвойте это значение переменной chinese_speakers_part
Напечатайте значение на экране в таком формате:
Доля людей, говорящих на китайском: ...
Сделайте так же для английского и русского языков. Переменные назовите english_speakers_part и russian_speakers_part
соответственно
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

english_speakers = 1121
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

chinese_speakers_part = chinese_speakers / total_speakers
print('Доля людей, говорящих на китайском:', chinese_speakers_part) # напишите код вместо многоточия

english_speakers_part = (english_speakers / total_speakers)
print('Доля людей, говорящих на английском:', english_speakers_part)

russian_speakers_part = (russian_speakers / total_speakers)
print('Доля людей, говорящих на русском:', russian_speakers_part)

########################################################################################################################
16. Функция format()
Пока что цифры выглядят непрезентабельно. Зачем громадные хвосты дробей после запятой? К чему эти стоквадриллионные? Даже когда речь идёт о населении планеты.
Вот в прошлом уроке вы получили такой результат:
Доля людей, говорящих на китайском: 0.14683645045762037
Доля людей, говорящих на английском: 0.14869346067117656
Доля людей, говорящих на русском: 0.035057699960206926
Лучше выводить доли в процентах. Эти проблемы помогает решить функция format().
Вызывается она своеобразно. Пример:
chinese_speakers = 1107
print('Число людей, говорящих на китайском: {} млн'.format(chinese_speakers))
Число людей, говорящих на китайском: 1107 млн
Разберём этот код по частям. Сначала пишется шаблон строки, которую мы хотим напечатать, где каждое число заменено фигурными скобками {}. Потом ставится точка и слово format. В круглых скобках функции format() передаются аргументы — список чисел, подставляемых вместо фигурных скобок.
image
Пока фигурные скобки пустые, число выводится так, как оно хранится в переменной. Но в этих фигурных скобках можно задать шаблон вывода. Он может оговаривать нужное количество знаков после запятой:
english_web_part = 0.539
print('Доля сайтов с английским языком: {:.2f}'.format(english_web_part))
Доля сайтов с английским языком: 0.54
Группа символов {:.2f} означает, что после запятой должно идти два знака. Последний символ "f" происходит от слова fixed (англ. «фиксированный») и означает, что число выводится как десятичная дробь с фиксированной точностью. Если же в конце поставить знак процента, то format() выведет не число, а процент:
english_web_part = 0.539
print('Доля сайтов с английским языком: {:.2%}'.format(english_web_part))
Доля сайтов с английским языком: 53.90%

# 16. Функция format()

"""
Задание
Результат печати функции в предыдущем уроке пока оставляет желать лучшего:
    Python напечатал слишком много цифр после запятой.
    Доли нагляднее показывать в процентах.
Такие проблемы решает функция format()
Задача 1:
Создайте переменную chinese_native с числом носителей китайского языка и напечатайте эту величину на экране
в таком виде:
Китайский язык - родной для ... млн человек
Воспользуйтесь функцией format()
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

chinese_speakers_part = chinese_speakers / total_speakers
print('Китайский язык - родной для {} млн человек'.format())(chinese_speakers_part)

"""
Задание 2
Вернёмся к задаче, с которой мы начали — вычислению доли владеющих разными языками среди всего населения Земли
Напечатайте на экране долю говорящих на китайском, сопровождая текстом:
Доля людей, говорящих на китайском: ...
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

chinese_speakers_part = chinese_speakers / total_speakers
print('Доля людей, говорящих на китайском: {:.2f}'.format(chinese_speakers_part)) # напишите код вместо многоточия

"""
Задание 3
Теперь напечатайте на экране долю людей, говорящих на китайском языке, в процентах вот в таком виде:
Доля людей, говорящих на китайском: ...
Выведите результат с точностью до одного знака после запятой. Напечатайте аналогичные величины для английского
и русского языков
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

english_speakers = 1121
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

chinese_speakers_part = chinese_speakers / total_speakers
english_speakers_part = english_speakers / total_speakers
russian_speakers_part = russian_speakers / total_speakers
print('Доля людей, говорящих на китайском: {:.1%}' .format(chinese_speakers_part))
print('Доля людей, говорящих на английском: {:.1%}' .format(english_speakers_part))
print('Доля людей, говорящих на русском: {:.1%}' .format(russian_speakers_part))

########################################################################################################################
17. Оформление текста
Пора научиться разбивать предложения на строки, а некоторые — оставлять пустыми, как в настоящих таблицах.
Чтобы в каждой строке не писать, о каком она языке, давайте разобьём вывод программы на блоки для каждого языка. Результат должен выглядеть так:
--- Китайский язык ---
...

--- Английский язык ---
...

--- Русский язык ---
...
Здесь очень важны два ещё неизвестных вам свойства функции print(). Во-первых, каждый вызов этой функции начинает печать с новой строки:
print('Это предложение')
print('разбито')
print('на несколько строк')
Это предложение
разбито
на несколько строк
Во-вторых, пустая строка получается, если вызвать функцию print() без аргументов:
print('--- О нулях (Николай Олейников) ---')
print()
print('Приятен вид тетради клетчатой:')
print('В ней нуль могучий помещен,')
print('А рядом нолик искалеченный')
print('Стоит, как маленький лимон.')
print()
print('О вы, нули мои и нолики,')
print('Я вас любил, я вас люблю!')
print('Скорей лечитесь, меланхолики,')
print('Прикосновением к нулю!')
print()
print('...')
--- О нулях (Николай Олейников) ---

Приятен вид тетради клетчатой:
В ней нуль могучий помещен,
А рядом нолик искалеченный
Стоит, как маленький лимон.

О вы, нули мои и нолики,
Я вас любил, я вас люблю!
Скорей лечитесь, меланхолики,
Прикосновением к нулю!

...

# 17. Оформление текста

"""
Задача
Добавьте для каждого блока заголовок с названием языка и пустую строку после каждого блока. Уберите названия языков
и слово «людей» из строк с долями. Вот так должен выглядеть ваш вывод:
--- Китайский язык ---
Доля говорящих на языке: ...
--- Английский язык ---
Доля говорящих на языке: ...
--- Русский язык ---
Доля говорящих на языке: ...
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

english_speakers = 1121
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

chinese_speakers_part = chinese_speakers / total_speakers
print('--- Китайский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(chinese_speakers_part))
print()

english_speakers_part = english_speakers / total_speakers
print('--- Английский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(english_speakers_part))
print()

russian_speakers_part = russian_speakers / total_speakers
print('--- Русский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(russian_speakers_part))
print()

########################################################################################################################
18. Языки в офлайне и в онлайне: завершение
Вооружившись функциями print() и format(), представим результаты исследования эффектно. Тем более, нам есть что подать: сейчас вычислим степень цифровой активности каждого языка — тот самый «индекс проникновения в интернет».

# 18. Языки в оффлайне и в онлайне: завершение

"""
Задача
Теперь, вооружившись функциями print() и format(), представим результаты исследования эффектно. Тем более, нам есть
что подать: сейчас мы вычислим степень цифровой активности каждого языка — тот самый «индекс проникновения
в интернет»
Добавьте в каждый блок информацию о доле сайтов на соответствующем языке. Долю напечатайте в процентах с точностью
до 1 знака после запятой. Вывод должен выглядеть так:
--- Китайский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
--- Английский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
--- Русский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

english_speakers = 1121
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

chinese_speakers_part = chinese_speakers / total_speakers
print('--- Китайский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(chinese_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(chinese_web_part))
print()

english_speakers_part = english_speakers / total_speakers
print('--- Английский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(english_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(english_web_part))
print()

russian_speakers_part = russian_speakers / total_speakers
print('--- Русский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(russian_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(russian_web_part))

# Задача 2:

"""
Добавим в каждый блок информацию об индексе проникновения в интернет. Поделим число сайтов с языком на число людей,
которые на нём говорят. Для наглядности умножьте результат на 1000 и выведите с точностью до двух знаков после
запятой. Итог должен выглядеть так:
--- Китайский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
Индекс проникновения в интернет: ...
--- Английский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
Индекс проникновения в интернет: ...
--- Русский язык ---
Доля говорящих на языке: ...
Доля сайтов с языком: ...
Индекс проникновения в интернет: ...
"""

# Solution:

total_web = 10
total_speakers = 7539

chinese_speakers = 1107
chinese_web_part = 0.017

english_speakers = 1121
english_web_part = 0.539

russian_speakers = 264.3
russian_web_part = 0.061

chinese_speakers_part = chinese_speakers / total_speakers
chinese_web_sites = chinese_web_part * total_web
chinese_index = 1000 * chinese_web_sites / chinese_speakers
print('--- Китайский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(chinese_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(chinese_web_part))
print('Индекс проникновения в интернет: {:.2f}'.format(chinese_index))
# < напишите код здесь >
print()

english_speakers_part = english_speakers / total_speakers
english_web_sites = english_web_part * total_web
english_index = 1000 * english_web_sites / english_speakers
# < напишите код здесь >
print('--- Английский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(english_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(english_web_part))
print('Индекс проникновения в интернет: {:.2f}'.format(english_index))
# < напишите код здесь >
print()

russian_speakers_part = russian_speakers / total_speakers
russian_web_sites = russian_web_part * total_web
russian_index = 1000 * russian_web_sites / russian_speakers
# < напишите код здесь >
print('--- Русский язык ---')
print('Доля говорящих на языке: {:.1%}'.format(russian_speakers_part))
print('Доля сайтов с языком: {:.1%}'.format(russian_web_part))
print('Индекс проникновения в интернет: {:.2f}'.format(russian_index))
# < напишите код здесь >
print()

########################################################################################################################
19. Заключение
Выводы из данных
Особая прелесть анализа данных в том, что цифры одни и те же, а выводы из них каждый специалист делает свои. Вот где возможность блеснуть. Здесь заканчиваются числа, и начинается ваше личное к ним отношение. Призовите свою память, эрудицию, свой интеллект и жизненный опыт. Здесь нужны вы! Роботы вас не заменят.
Полюбуемся на окончательные результаты. Какие выводы вы бы сделали?
--- Китайский язык ---
Доля говорящих на языке: 14.6%
Доля сайтов с языком: 1.7%
Индекс проникновения в интернет: 0.15

--- Английский язык ---
Доля говорящих на языке: 14.8%
Доля сайтов с языком: 53.9%
Индекс проникновения в интернет: 4.81

--- Русский язык ---
Доля говорящих на языке: 3.5%
Доля сайтов с языком: 6.1%
Индекс проникновения в интернет: 2.31
Вот наш вариант:
Китайский язык и английский язык примерно одинаково распространены в реальном мире.
При этом в интернете английский доминирует, и его индекс проникновения в десятки раз больше, чем у китайского.
Русский язык значительно меньше распространен, чем английский и китайский. Но в сети русский встречается чаще китайского языка, и его индекс проникновения в интернет всего в два раза меньше индекса английского языка и значительно больше, чем у китайского.
Что дальше
Python может намного больше! Его звёздный час настаёт, когда нужно обработать крупные массивы данных, переложив чёрную работу на программу. Большие объёмы данных собирают в структуры, с которыми Python справляется особенно хорошо. Самая простая и, пожалуй, самая расхожая структура — списки. Сейчас мы с ними познакомимся. Научимся обрабатывать их циклами и освободим руки для самой приятной стороны жизни аналитика: выдвижения и проверки гипотез. Первая гипотеза ждёт вас уже в начале следующей темы.
Забери с собой
Чтобы ничего не забыть, скачайте шпаргалку
Систематизируйте полученные знания — скачайте и рассмотрите полную концепт-карту по пройденной теме.